Python 2.7.12 (default, Jul  1 2016, 15:12:24) 
[GCC 5.4.0 20160609] on linux2
Type "copyright", "credits" or "license()" for more information.
>>> # dot product :
>>> import numpy as np
>>> x=np.array([[1., 2., 3.], [4., 5., 6.]])
>>> x
array([[ 1.,  2.,  3.],
       [ 4.,  5.,  6.]])
>>> y= np.array([[6., 23.], [-1, 7], [8,9]])
>>> y
array([[  6.,  23.],
       [ -1.,   7.],
       [  8.,   9.]])
>>> x.dot(y) # equiv. np.dot(x,y)
array([[  28.,   64.],
       [  67.,  181.]])
>>> from numpy.linalg import inv, qr
>>> import random
>>> np.random.randn(5,5)
array([[-0.59309069, -0.72293956,  1.03392291,  0.93700677,  1.24431084],
       [-0.27815175, -1.25274544,  1.38704073, -1.09344817,  0.32080459],
       [-2.08001135, -0.83120593, -1.96465151, -1.03197665, -0.46107369],
       [-0.93725182,  0.44379081,  0.0288362 ,  0.11548583,  1.45151747],
       [ 0.03412149,  1.25597985,  1.02930639,  0.84889556,  0.62053478]])
>>> X= np.random.randn(5,5)
>>> X
array([[ 0.67216886,  0.0974231 , -0.01700737,  0.83270273,  0.10368156],
       [ 0.10755319,  0.62723574,  0.24422526,  2.41319236, -1.51978076],
       [ 0.28446711, -0.09834379,  0.5907895 , -0.7691383 , -0.3497239 ],
       [-0.58587229,  0.680051  ,  1.61658798,  0.71194508, -0.09162203],
       [-0.41820381, -1.71318119,  0.23974271,  0.98566976,  1.8760471 ]])
>>> mat=X.T.dot(X)
>>> mat
array([[ 1.06244097,  0.42300628, -0.86447985, -0.22885092, -0.92414194],
       [ 0.42300628,  3.81004656,  0.78206899,  0.46593301, -4.18508291],
       [-0.86447985,  0.78206899,  3.07980072,  1.5080306 , -0.27789186],
       [-0.22885092,  0.46593301,  1.5080306 ,  8.58687563, -1.5282683 ],
       [-0.92414194, -4.18508291, -0.27789186, -1.5282683 ,  5.97073756]])
>>> inv(mat)
array([[ 1.54805904,  0.13039221,  0.42207678,  0.02353654,  0.35667124],
       [ 0.13039221,  1.5236634 , -0.3370675 ,  0.17902789,  1.11830286],
       [ 0.42207678, -0.3370675 ,  0.56211292, -0.09947764, -0.17023332],
       [ 0.02353654,  0.17902789, -0.09947764,  0.15401432,  0.16392093],
       [ 0.35667124,  1.11830286, -0.17023332,  0.16392093,  1.04057726]])
>>> mat.dot(inv(mat))
array([[  1.00000000e+00,   0.00000000e+00,  -2.77555756e-17,
          0.00000000e+00,   0.00000000e+00],
       [  2.22044605e-16,   1.00000000e+00,   0.00000000e+00,
          0.00000000e+00,   8.88178420e-16],
       [ -6.93889390e-17,   2.77555756e-16,   1.00000000e+00,
          6.93889390e-18,   2.77555756e-16],
       [  0.00000000e+00,  -2.22044605e-16,  -5.55111512e-17,
          1.00000000e+00,  -2.22044605e-16],
       [  0.00000000e+00,  -1.77635684e-15,   2.22044605e-16,
         -1.11022302e-16,   1.00000000e+00]])
>>> 
>>> 
>>> # Example: Random Walks
>>> 
========================================= RESTART: Shell =========================================
>>> import numpy as np
>>> import random
>>> position=0
>>> walk=[position]
>>> walk
[0]
>>> steps=1000
>>> for i in xrange(steps) :
	step =1 if random.randint(0,1) else -1
	position += step
	walk.append(position)

	
>>> walk
[0, -1, -2, -3, -2, -1, -2, -1, 0, -1, 0, 1, 2, 3, 2, 1, 2, 1, 0, -1, -2, -3, -4, -5, -4, -5, -4, -5, -6, -5, -6, -5, -4, -3, -2, -1, 0, -1, 0, 1, 0, -1, -2, -1, -2, -3, -4, -5, -6, -5, -6, -5, -4, -3, -4, -5, -6, -7, -8, -9, -8, -7, -6, -5, -4, -3, -2, -3, -2, -3, -2, -3, -4, -5, -6, -7, -8, -7, -6, -7, -6, -7, -6, -7, -8, -9, -8, -7, -6, -7, -6, -5, -6, -5, -6, -5, -4, -5, -4, -3, -4, -5, -6, -5, -4, -5, -6, -7, -8, -9, -10, -11, -10, -11, -12, -13, -12, -11, -12, -13, -14, -13, -14, -15, -16, -15, -14, -13, -12, -13, -12, -11, -12, -13, -14, -13, -14, -13, -12, -13, -12, -13, -14, -15, -14, -13, -12, -11, -12, -13, -14, -13, -14, -15, -14, -13, -12, -11, -12, -13, -12, -11, -12, -11, -12, -11, -12, -11, -10, -11, -12, -11, -12, -11, -12, -11, -10, -9, -10, -9, -8, -7, -8, -9, -8, -9, -10, -11, -12, -11, -12, -11, -12, -11, -10, -9, -10, -11, -12, -11, -10, -9, -8, -9, -8, -7, -8, -7, -6, -7, -8, -9, -10, -11, -10, -9, -10, -11, -10, -9, -10, -11, -10, -11, -12, -13, -14, -13, -14, -13, -12, -13, -12, -13, -14, -13, -14, -13, -12, -13, -12, -11, -10, -11, -12, -13, -14, -13, -12, -11, -12, -11, -12, -13, -14, -15, -14, -13, -14, -15, -16, -17, -18, -17, -18, -17, -18, -17, -16, -17, -18, -19, -20, -21, -20, -21, -22, -21, -22, -21, -20, -21, -20, -21, -22, -21, -22, -21, -22, -23, -24, -23, -22, -21, -22, -21, -22, -23, -22, -23, -24, -25, -24, -25, -24, -23, -24, -23, -24, -23, -22, -21, -20, -21, -22, -23, -24, -25, -26, -27, -28, -27, -26, -27, -26, -25, -24, -23, -24, -25, -24, -23, -22, -21, -20, -19, -18, -19, -18, -19, -18, -19, -18, -19, -20, -21, -22, -23, -24, -25, -26, -25, -26, -25, -24, -25, -24, -25, -26, -25, -24, -23, -24, -23, -22, -23, -22, -21, -20, -21, -20, -19, -18, -17, -16, -15, -14, -15, -16, -17, -18, -19, -18, -17, -18, -19, -20, -19, -18, -17, -18, -17, -18, -17, -18, -17, -16, -15, -16, -15, -16, -15, -14, -13, -12, -11, -12, -13, -14, -15, -16, -15, -14, -15, -14, -13, -14, -15, -14, -13, -14, -13, -12, -11, -12, -11, -10, -9, -8, -7, -6, -7, -6, -7, -6, -5, -4, -3, -4, -5, -4, -5, -6, -5, -4, -3, -2, -3, -2, -1, 0, 1, 0, 1, 2, 1, 2, 1, 2, 1, 0, 1, 2, 1, 2, 1, 2, 3, 4, 3, 2, 3, 2, 1, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -6, -5, -4, -3, -4, -3, -2, -3, -4, -3, -4, -3, -4, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 6, 5, 6, 7, 8, 9, 10, 11, 12, 11, 12, 11, 12, 11, 10, 9, 10, 9, 8, 9, 8, 7, 8, 9, 8, 9, 10, 11, 12, 13, 14, 13, 12, 11, 10, 9, 8, 7, 8, 9, 10, 9, 10, 9, 10, 11, 12, 11, 10, 9, 8, 9, 10, 9, 8, 9, 10, 11, 12, 13, 14, 13, 14, 13, 14, 13, 14, 15, 14, 13, 14, 13, 12, 13, 14, 15, 16, 15, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 8, 9, 10, 11, 10, 11, 10, 9, 10, 11, 10, 9, 8, 9, 10, 9, 10, 9, 8, 9, 8, 7, 6, 7, 6, 5, 6, 7, 6, 7, 8, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, 0, 1, 2, 3, 2, 1, 0, -1, 0, -1, -2, -3, -4, -3, -4, -3, -4, -3, -4, -3, -2, -1, 0, 1, 0, -1, -2, -3, -2, -3, -2, -3, -2, -1, 0, 1, 0, 1, 0, -1, 0, -1, 0, -1, 0, -1, 0, -1, -2, -3, -4, -3, -2, -3, -4, -5, -4, -5, -4, -5, -6, -5, -6, -7, -6, -5, -6, -7, -6, -5, -6, -5, -4, -3, -2, -3, -2, -1, -2, -1, -2, -3, -4, -5, -4, -5, -6, -7, -8, -7, -8, -7, -6, -5, -4, -3, -2, -1, 0, -1, -2, -1, -2, -3, -4, -5, -4, -5, -6, -7, -8, -7, -8, -7, -6, -5, -6, -5, -6, -7, -6, -5, -4, -3, -2, -3, -2, -1, 0, 1, 0, -1, -2, -1, 0, -1, -2, -1, 0, 1, 2, 3, 4, 5, 6, 5, 4, 5, 4, 3, 2, 1, 2, 1, 2, 1, 0, -1, 0, 1, 2, 3, 4, 5, 4, 3, 4, 5, 6, 7, 8, 9, 8, 9, 10, 9, 8, 9, 10, 11, 10, 9, 10, 11, 12, 11, 10, 11, 12, 11, 10, 11, 12, 13, 14, 15, 16, 17, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 17, 16, 15, 14, 15, 14, 15, 16, 17, 18, 19, 18, 19, 18, 17, 18, 19, 18, 19, 18, 19, 18, 17, 18, 17, 18, 17, 18, 19, 20, 19, 20, 19, 20, 19, 20, 19, 18, 17, 16, 15, 16, 17, 18, 19, 20, 19, 20, 21, 22, 21, 20, 19, 18, 19, 18, 17, 18, 19, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 26, 25, 26, 27, 28, 29, 30, 29, 30, 31, 32, 31, 32, 31, 30, 29, 30, 29, 28, 27, 28, 29, 28, 27, 28, 27, 28, 27, 28, 27, 28, 29, 28, 29, 28, 27, 28, 29, 28, 29, 30, 31, 30, 29, 28, 27, 26, 27, 28, 27, 28, 27, 28, 27, 28, 27, 26, 27, 26, 25, 26, 25, 26, 25, 24, 25, 24, 23, 24, 23, 24, 23, 24, 23, 22, 23, 24]
>>> np.random.randint(0,1)
0
>>> np.random.randint(0,1)
0
>>> np.random.randint(0,2)
1
>>> np.random.randint(0,2)
0
>>> np.random.randint(0,2)
1
>>> np.random.randint(0,2)
1
>>> np.random.randint(0,2)
0
>>> np.random.randint(0,1)
0
>>> np.random.randint(0,1)
0
>>> np.random.randint(0,1)
0
>>> random.randint(0,1)
1
>>> random.randint(0,1)
1
>>> 
>>> random.randint(0,1)
0
>>> random.randint(0,1)
0
>>> random.randint(0,1)
0
>>> random.randint(0,1)
1
>>> # ok, so the built in random module picks up an integer for the closed interval
>>> # np.random doen't use a closed interval. It has as parameters the lowest and the size.
>>> # ... and the highest
>>> 
========================================= RESTART: Shell =========================================
>>> # let see this at work again :
>>> import numpy as np
>>> import random
>>> position =0
>>> walk = [position]
>>> steps =1000
>>> for i in xrange(steps) :
	step = 1 if random.randint(0,1)
	
SyntaxError: invalid syntax
>>> for i in xrange(steps) :
	step=1 if random.randint(0,1) else -1
	position += step
	walk.append(position)

	
>>> # now with np.random module:
>>> nsteps = 1000
>>> draws = np.random.randint(0,2, size=nsteps)
>>> draws
array([1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0,
       1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1,
       1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1,
       1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0,
       1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0,
       1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1,
       0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1,
       1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1,
       1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1,
       0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
       1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0,
       1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1,
       1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1,
       1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1,
       1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1,
       1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0,
       0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1,
       0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0,
       0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1,
       1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0,
       0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0,
       0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1,
       0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1,
       0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1,
       1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
       0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1,
       1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0,
       0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1,
       0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0,
       0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1,
       1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0,
       0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0,
       0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1,
       0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1,
       1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0,
       0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0,
       1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0,
       1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1,
       0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1,
       1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1,
       0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0,
       0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1,
       1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0,
       0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1])
>>> steps = np.where(draws>0,1, -1)
>>> steps
array([ 1, -1,  1, -1, -1, -1,  1,  1,  1, -1, -1, -1,  1,  1, -1,  1,  1,
       -1,  1,  1, -1, -1, -1,  1,  1, -1, -1,  1, -1, -1,  1,  1, -1,  1,
       -1, -1, -1,  1,  1, -1, -1,  1, -1,  1,  1,  1,  1, -1, -1,  1,  1,
        1, -1,  1, -1, -1,  1,  1,  1,  1,  1,  1,  1, -1,  1,  1,  1, -1,
        1,  1, -1,  1,  1, -1,  1, -1,  1, -1,  1, -1,  1,  1,  1,  1,  1,
       -1, -1, -1,  1,  1, -1, -1,  1,  1,  1, -1,  1, -1, -1,  1,  1, -1,
        1,  1,  1, -1,  1, -1,  1,  1,  1, -1,  1, -1, -1,  1, -1,  1,  1,
        1, -1,  1,  1,  1,  1,  1,  1, -1,  1,  1, -1, -1, -1, -1, -1, -1,
       -1,  1, -1, -1, -1,  1,  1, -1,  1, -1, -1, -1, -1,  1, -1, -1, -1,
       -1,  1,  1,  1, -1, -1,  1,  1,  1, -1, -1, -1, -1, -1, -1,  1, -1,
        1, -1, -1,  1, -1, -1,  1,  1,  1, -1,  1,  1, -1,  1,  1,  1,  1,
        1, -1, -1,  1,  1,  1,  1, -1,  1, -1, -1,  1, -1, -1, -1, -1, -1,
        1,  1,  1, -1,  1, -1, -1,  1, -1,  1,  1,  1, -1, -1,  1, -1, -1,
        1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, -1, -1, -1,  1, -1, -1,
       -1,  1,  1, -1, -1, -1, -1,  1, -1,  1,  1, -1, -1, -1, -1,  1, -1,
       -1,  1, -1, -1,  1,  1,  1, -1, -1, -1,  1,  1,  1, -1,  1,  1,  1,
        1,  1,  1,  1,  1, -1,  1,  1, -1,  1, -1,  1,  1, -1, -1, -1, -1,
       -1,  1,  1,  1, -1,  1, -1,  1,  1,  1,  1,  1, -1,  1,  1,  1, -1,
       -1,  1,  1, -1, -1,  1,  1,  1,  1,  1, -1, -1, -1,  1,  1,  1,  1,
        1,  1, -1,  1, -1,  1,  1,  1, -1,  1,  1,  1, -1, -1, -1, -1,  1,
        1,  1,  1,  1,  1,  1,  1, -1,  1,  1,  1, -1,  1,  1, -1, -1, -1,
        1,  1, -1,  1, -1, -1,  1, -1,  1, -1, -1, -1, -1,  1,  1, -1,  1,
       -1, -1,  1,  1,  1,  1, -1,  1,  1, -1,  1,  1,  1, -1, -1, -1,  1,
       -1, -1,  1,  1, -1, -1,  1, -1, -1,  1,  1,  1, -1, -1,  1, -1,  1,
       -1,  1, -1, -1,  1, -1, -1,  1, -1,  1,  1, -1,  1,  1,  1, -1,  1,
       -1, -1, -1,  1, -1, -1,  1, -1, -1,  1, -1,  1,  1, -1, -1, -1, -1,
        1, -1,  1, -1, -1,  1,  1, -1,  1, -1,  1,  1,  1,  1, -1,  1, -1,
       -1, -1, -1, -1, -1,  1,  1, -1,  1,  1, -1, -1, -1,  1, -1, -1, -1,
        1, -1,  1, -1, -1,  1, -1, -1,  1, -1, -1,  1,  1,  1,  1,  1,  1,
       -1,  1,  1, -1,  1,  1, -1,  1,  1,  1, -1, -1,  1, -1, -1, -1,  1,
       -1,  1,  1, -1, -1, -1,  1, -1, -1, -1,  1, -1, -1, -1,  1,  1, -1,
        1,  1, -1,  1, -1,  1, -1, -1,  1,  1, -1,  1, -1,  1, -1,  1, -1,
       -1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, -1, -1,
        1,  1,  1, -1,  1,  1,  1,  1,  1,  1,  1,  1, -1,  1, -1,  1, -1,
       -1,  1,  1, -1,  1, -1,  1, -1, -1, -1, -1, -1,  1,  1,  1,  1,  1,
       -1, -1,  1,  1, -1,  1, -1,  1, -1, -1, -1,  1, -1, -1,  1, -1, -1,
       -1,  1, -1,  1,  1, -1, -1,  1, -1, -1,  1, -1,  1,  1,  1,  1,  1,
       -1,  1, -1, -1,  1, -1, -1,  1,  1,  1, -1, -1,  1, -1,  1, -1, -1,
        1,  1, -1, -1, -1,  1,  1,  1, -1,  1,  1,  1, -1, -1,  1, -1, -1,
       -1,  1, -1, -1, -1, -1, -1,  1, -1,  1,  1,  1,  1, -1, -1, -1,  1,
       -1, -1,  1, -1, -1, -1, -1,  1, -1,  1,  1,  1, -1,  1,  1,  1, -1,
        1, -1, -1,  1, -1, -1, -1,  1, -1,  1, -1,  1,  1, -1,  1, -1, -1,
       -1, -1,  1,  1,  1, -1, -1, -1, -1, -1,  1, -1,  1,  1,  1, -1, -1,
       -1,  1,  1, -1, -1, -1,  1, -1,  1, -1,  1, -1, -1,  1,  1,  1,  1,
        1, -1,  1,  1, -1, -1,  1, -1,  1,  1,  1, -1, -1,  1,  1, -1,  1,
        1,  1, -1, -1, -1, -1, -1, -1, -1, -1,  1,  1,  1,  1, -1,  1,  1,
        1,  1, -1, -1, -1,  1,  1, -1,  1, -1,  1,  1,  1,  1,  1,  1, -1,
       -1, -1, -1, -1,  1, -1, -1,  1, -1, -1,  1,  1,  1,  1, -1, -1,  1,
        1,  1,  1,  1, -1, -1,  1,  1, -1, -1,  1, -1,  1,  1, -1,  1,  1,
        1,  1, -1, -1, -1,  1,  1, -1,  1,  1,  1, -1, -1,  1,  1,  1,  1,
       -1,  1, -1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  1,  1,  1,
        1,  1, -1, -1, -1, -1,  1, -1, -1, -1,  1, -1, -1, -1, -1,  1,  1,
        1,  1,  1,  1, -1,  1, -1,  1,  1, -1,  1,  1,  1,  1, -1,  1,  1,
       -1, -1,  1, -1,  1,  1, -1,  1,  1, -1,  1,  1, -1, -1,  1, -1,  1,
       -1,  1, -1, -1,  1, -1, -1, -1,  1, -1, -1,  1,  1,  1, -1, -1,  1,
        1, -1,  1,  1,  1,  1,  1, -1, -1, -1,  1,  1,  1, -1, -1, -1,  1,
       -1,  1,  1,  1,  1,  1,  1, -1,  1,  1, -1, -1, -1,  1,  1,  1,  1,
        1, -1, -1, -1,  1, -1,  1,  1, -1,  1, -1,  1,  1,  1,  1, -1,  1,
        1,  1, -1, -1,  1,  1,  1,  1, -1,  1,  1,  1, -1,  1])
>>> walk = steps.cumsum()
>>> walk
array([ 1,  0,  1,  0, -1, -2, -1,  0,  1,  0, -1, -2, -1,  0, -1,  0,  1,
        0,  1,  2,  1,  0, -1,  0,  1,  0, -1,  0, -1, -2, -1,  0, -1,  0,
       -1, -2, -3, -2, -1, -2, -3, -2, -3, -2, -1,  0,  1,  0, -1,  0,  1,
        2,  1,  2,  1,  0,  1,  2,  3,  4,  5,  6,  7,  6,  7,  8,  9,  8,
        9, 10,  9, 10, 11, 10, 11, 10, 11, 10, 11, 10, 11, 12, 13, 14, 15,
       14, 13, 12, 13, 14, 13, 12, 13, 14, 15, 14, 15, 14, 13, 14, 15, 14,
       15, 16, 17, 16, 17, 16, 17, 18, 19, 18, 19, 18, 17, 18, 17, 18, 19,
       20, 19, 20, 21, 22, 23, 24, 25, 24, 25, 26, 25, 24, 23, 22, 21, 20,
       19, 20, 19, 18, 17, 18, 19, 18, 19, 18, 17, 16, 15, 16, 15, 14, 13,
       12, 13, 14, 15, 14, 13, 14, 15, 16, 15, 14, 13, 12, 11, 10, 11, 10,
       11, 10,  9, 10,  9,  8,  9, 10, 11, 10, 11, 12, 11, 12, 13, 14, 15,
       16, 15, 14, 15, 16, 17, 18, 17, 18, 17, 16, 17, 16, 15, 14, 13, 12,
       13, 14, 15, 14, 15, 14, 13, 14, 13, 14, 15, 16, 15, 14, 15, 14, 13,
       14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 23, 22, 21, 22, 21, 20,
       19, 20, 21, 20, 19, 18, 17, 18, 17, 18, 19, 18, 17, 16, 15, 16, 15,
       14, 15, 14, 13, 14, 15, 16, 15, 14, 13, 14, 15, 16, 15, 16, 17, 18,
       19, 20, 21, 22, 23, 22, 23, 24, 23, 24, 23, 24, 25, 24, 23, 22, 21,
       20, 21, 22, 23, 22, 23, 22, 23, 24, 25, 26, 27, 26, 27, 28, 29, 28,
       27, 28, 29, 28, 27, 28, 29, 30, 31, 32, 31, 30, 29, 30, 31, 32, 33,
       34, 35, 34, 35, 34, 35, 36, 37, 36, 37, 38, 39, 38, 37, 36, 35, 36,
       37, 38, 39, 40, 41, 42, 43, 42, 43, 44, 45, 44, 45, 46, 45, 44, 43,
       44, 45, 44, 45, 44, 43, 44, 43, 44, 43, 42, 41, 40, 41, 42, 41, 42,
       41, 40, 41, 42, 43, 44, 43, 44, 45, 44, 45, 46, 47, 46, 45, 44, 45,
       44, 43, 44, 45, 44, 43, 44, 43, 42, 43, 44, 45, 44, 43, 44, 43, 44,
       43, 44, 43, 42, 43, 42, 41, 42, 41, 42, 43, 42, 43, 44, 45, 44, 45,
       44, 43, 42, 43, 42, 41, 42, 41, 40, 41, 40, 41, 42, 41, 40, 39, 38,
       39, 38, 39, 38, 37, 38, 39, 38, 39, 38, 39, 40, 41, 42, 41, 42, 41,
       40, 39, 38, 37, 36, 37, 38, 37, 38, 39, 38, 37, 36, 37, 36, 35, 34,
       35, 34, 35, 34, 33, 34, 33, 32, 33, 32, 31, 32, 33, 34, 35, 36, 37,
       36, 37, 38, 37, 38, 39, 38, 39, 40, 41, 40, 39, 40, 39, 38, 37, 38,
       37, 38, 39, 38, 37, 36, 37, 36, 35, 34, 35, 34, 33, 32, 33, 34, 33,
       34, 35, 34, 35, 34, 35, 34, 33, 34, 35, 34, 35, 34, 35, 34, 35, 34,
       33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 46, 45,
       46, 47, 48, 47, 48, 49, 50, 51, 52, 53, 54, 55, 54, 55, 54, 55, 54,
       53, 54, 55, 54, 55, 54, 55, 54, 53, 52, 51, 50, 51, 52, 53, 54, 55,
       54, 53, 54, 55, 54, 55, 54, 55, 54, 53, 52, 53, 52, 51, 52, 51, 50,
       49, 50, 49, 50, 51, 50, 49, 50, 49, 48, 49, 48, 49, 50, 51, 52, 53,
       52, 53, 52, 51, 52, 51, 50, 51, 52, 53, 52, 51, 52, 51, 52, 51, 50,
       51, 52, 51, 50, 49, 50, 51, 52, 51, 52, 53, 54, 53, 52, 53, 52, 51,
       50, 51, 50, 49, 48, 47, 46, 47, 46, 47, 48, 49, 50, 49, 48, 47, 48,
       47, 46, 47, 46, 45, 44, 43, 44, 43, 44, 45, 46, 45, 46, 47, 48, 47,
       48, 47, 46, 47, 46, 45, 44, 45, 44, 45, 44, 45, 46, 45, 46, 45, 44,
       43, 42, 43, 44, 45, 44, 43, 42, 41, 40, 41, 40, 41, 42, 43, 42, 41,
       40, 41, 42, 41, 40, 39, 40, 39, 40, 39, 40, 39, 38, 39, 40, 41, 42,
       43, 42, 43, 44, 43, 42, 43, 42, 43, 44, 45, 44, 43, 44, 45, 44, 45,
       46, 47, 46, 45, 44, 43, 42, 41, 40, 39, 40, 41, 42, 43, 42, 43, 44,
       45, 46, 45, 44, 43, 44, 45, 44, 45, 44, 45, 46, 47, 48, 49, 50, 49,
       48, 47, 46, 45, 46, 45, 44, 45, 44, 43, 44, 45, 46, 47, 46, 45, 46,
       47, 48, 49, 50, 49, 48, 49, 50, 49, 48, 49, 48, 49, 50, 49, 50, 51,
       52, 53, 52, 51, 50, 51, 52, 51, 52, 53, 54, 53, 52, 53, 54, 55, 56,
       55, 56, 55, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 47, 48, 49,
       50, 51, 50, 49, 48, 47, 48, 47, 46, 45, 46, 45, 44, 43, 42, 43, 44,
       45, 46, 47, 48, 47, 48, 47, 48, 49, 48, 49, 50, 51, 52, 51, 52, 53,
       52, 51, 52, 51, 52, 53, 52, 53, 54, 53, 54, 55, 54, 53, 54, 53, 54,
       53, 54, 53, 52, 53, 52, 51, 50, 51, 50, 49, 50, 51, 52, 51, 50, 51,
       52, 51, 52, 53, 54, 55, 56, 55, 54, 53, 54, 55, 56, 55, 54, 53, 54,
       53, 54, 55, 56, 57, 58, 59, 58, 59, 60, 59, 58, 57, 58, 59, 60, 61,
       62, 61, 60, 59, 60, 59, 60, 61, 60, 61, 60, 61, 62, 63, 64, 63, 64,
       65, 66, 65, 64, 65, 66, 67, 68, 67, 68, 69, 70, 69, 70])
>>> # see when the walk reaches 10 steps below or above 0:
>>> np.abs(walk)>=10
array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False,  True, False,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True, False,  True, False, False, False,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,  True], dtype=bool)
>>> (np.abs(walk) >=10).argmax()
69
>>> nwalks=5000
>>> nsteps=1000
>>> draws= np.random.randint(0,2, size(nwalks, nsteps))

Traceback (most recent call last):
  File "<pyshell#77>", line 1, in <module>
    draws= np.random.randint(0,2, size(nwalks, nsteps))
NameError: name 'size' is not defined
>>> draws= np.random.randint(0,2, size=(nwalks, nsteps))
>>> steps = np.where(draws >0, 1, -1)
>>> walks=steps.cumsum(1)
>>> walks
array([[  1,   0,   1, ..., -10,  -9,  -8],
       [  1,   0,  -1, ..., -70, -69, -70],
       [ -1,  -2,  -3, ...,  16,  15,  16],
       ..., 
       [ -1,  -2,  -3, ..., -42, -43, -44],
       [  1,   0,  -1, ...,   2,   3,   2],
       [  1,   0,  -1, ...,   6,   5,   6]])
>>> hits30= (np.abs(walks)>=30).any(1)
>>> hits30
array([ True,  True,  True, ...,  True, False,  True], dtype=bool)
>>> hits30.sum()
3475
>>> crossing_times=(np.abs(walks[hits30]) >=30).argmax(1)
>>> crossing_times
array([813, 361, 663, ..., 263, 221, 365])
>>> crossing_times.mean()
507.43453237410074
>>> 
